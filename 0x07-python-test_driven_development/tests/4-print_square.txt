Normal
======
`print_square()` prints a square with the character `#`.

>>> print_square = __import__('4-print_square').print_square

>>> print_square(4)
####
####
####
####

>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########

>>> print_square(1)
#

>>> print_square(0)

>>> print_square(4)
####
####
####
####
>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########

Invalid Argument
===============
`print_square()` raises a TypeError exception if `size` isn't an integer

>>> print_square("Hi")
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square("5.0")
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square("10")
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square("-5")
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(None)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(True)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(False)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(1e6)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(0.0)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(5.)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

Missing Argument
================

>>> print_square()
Traceback (most recent call last):
            ...
TypeError: print_square() missing 1 required positional argument: 'size'


Negative Size
=============
`print_square()` raises a ValueError exception if `size` is less than 0

>>> print_square(-1)
Traceback (most recent call last):
            ...
ValueError: size must be >= 0

Float & Less than Zero
======================
`print_square()` raises a TypeError exception if `size` is a float and less than 0

>>> print_square(-2.5)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-1e6)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-1.0)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-1.000000001)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-1.0000000000000001)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-1.23456789)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-1e-6)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-5.)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

>>> print_square(-5.0000)
Traceback (most recent call last):
            ...
TypeError: size must be an integer

Large Numbers
=============

>> print_square(0x1F)
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################
###############################

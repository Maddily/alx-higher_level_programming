Integers
=======
`add_integer()` returns the sum of its arguments.

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(100, -2)
98
>>> add_integer(2)
100
>>> add_integer(0, 7)
7
>>> add_integer(5, 0)
5

Large Numbers
==============
`add_integer()` functions correctly with large numbers

>>> add_integer(10 ** 10, 5)
10000000005
>>> add_integer(1e20, 2.5)
100000000000000000002
>>> add_integer(1.2e3, 4)
1204

Floating-Point Numbers
======================
`add_integer()` casts the floating-point numbers to integers.

>>> add_integer(100.3, -2)
98
>>> add_integer(2.3, 4.7)
6
>>> add_integer(-2.5, 3.5)
1

Missing Arguments
=================

>>> add_integer()
Traceback (most recent call last):
            ...
TypeError: add_integer() missing 1 required positional argument: 'a'

Non-Numbers
===========
`add_integer()` raises a TypeError exception
if the arguments aren't integers or floating-point numbers.

>>> add_integer(4, "School")
Traceback (most recent call last):
            ...
TypeError: b must be an integer

>>> add_integer("School", 4)
Traceback (most recent call last):
            ...
TypeError: a must be an integer

>>> add_integer("Test", "Test")
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(None)
Traceback (most recent call last):
            ...
TypeError: a must be an integer

>>> add_integer(None, None)
Traceback (most recent call last):
            ...
TypeError: a must be an integer

>>> add_integer(3, True)
Traceback (most recent call last):
            ...
TypeError: b must be an integer

>>> add_integer(False, 3)
Traceback (most recent call last):
            ...
TypeError: a must be an integer

>>> add_integer(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

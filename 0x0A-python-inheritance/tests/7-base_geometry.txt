>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "Mohammad")
Traceback (most recent call last):
            ...
TypeError: name must be an integer
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
            ...
ValueError: age must be greater than 0
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
            ...
ValueError: distance must be greater than 0

>>> bg.area()
Traceback (most recent call last):
            ...
Exception: area() is not implemented

>>> class CustomGeometryWithValidator(BaseGeometry):
...     def __init__(self):
...         self.integer_validator("width", 10)
...
>>> custom_geom_with_validator = CustomGeometryWithValidator()

>>> custom_geom_with_validator.area()
Traceback (most recent call last):
            ...
Exception: area() is not implemented

>>> class ValidGeometry(BaseGeometry):
...     def area(self):
...         return 10
...
>>> valid_geom = ValidGeometry()
>>> valid_geom.area()
10

>>> bg.integer_validator("temperature", 25.5)
Traceback (most recent call last):
            ...
TypeError: temperature must be an integer

>>> class AnotherValidGeometry(BaseGeometry):
...     pass
...
>>> another_valid_geom = AnotherValidGeometry()
>>> another_valid_geom.integer_validator("width", 15)

>>> class InvalidGeometry:
...     pass
...
>>> invalid_geom = InvalidGeometry()
>>> bg.integer_validator("height", invalid_geom)
Traceback (most recent call last):
            ...
TypeError: height must be an integer
